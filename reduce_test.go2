// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package filter

import (
	"testing"
)

func mul(a, b int) int {
	return a * b
}

func addFloat(a, b float64) float64 {
	return a + b
}

func TestReduce(t *testing.T) {
	a := make([]int, 10)
	for i := range a {
		a[i] = i + 1
	}
	// Compute 10!
	out := Reduce(a, mul, 1)
	expect := 1
	for i := range a {
		expect *= a[i]
	}
	if expect != out {
		t.Fatalf("expected %d got %d", expect, out)
	}
}

func TestReduceNonZeroInitialNilSlice(t *testing.T) {
	var a []float64
	out := Reduce(a, addFloat, 273.15)
	expect := 273.15
	if expect != out {
		t.Fatalf("expected %v got %v", expect, out)
	}
}

func TestReduceNonZeroInitialEmptySlice(t *testing.T) {
	a := []float64{}
	out := Reduce(a, addFloat, 273.15)
	expect := 273.15
	if expect != out {
		t.Fatalf("expected %v got %v", expect, out)
	}
}

func TestReduceNonZeroInitialSingleElementSlice(t *testing.T) {
	a := []float64{1.1}
	out := Reduce(a, addFloat, 273.15)
	expect := 274.25
	if expect != out {
		t.Fatalf("expected %v got %v", expect, out)
	}
}

func TestReduceNonZeroInitialWithSlice(t *testing.T) {
	a := []float64{1, 2, 3}
	out := Reduce(a, addFloat, 273.15)
	expect := 279.15
	if expect != out {
		t.Fatalf("expected %v got %v", expect, out)
	}
}
